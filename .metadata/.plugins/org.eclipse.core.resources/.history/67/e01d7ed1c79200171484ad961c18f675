import java.awt.Color;

import processing.core.PApplet;
import processing.core.PConstants;
import processing.core.PShape;

public class Person
{

    private float xPos, yPos;
    public float altitude;

    private Color saberColor;
    private String saberSide;

    //private PShape person;

    // instantiates local member data
    public Person()
    {
        xPos = DrawingSurface.SCREEN_WIDTH / 2;
        yPos = DrawingSurface.SCREEN_WIDTH / 2;

        saberColor = Color.RED;
        this.saberSide = DrawingSurface.RIGHT;
        

//        person = new PShape();

    }

    public Person(int initX, int initY, String saberSide)
    {
        xPos = initX;
        yPos = initY;

        saberColor = Color.RED;
        this.saberSide = saberSide;
        

//        person = new PShape();
    }

    // method called by the DrawingSurface class draw the the person
    public void draw(PApplet drawer)
    {
        drawer.pushMatrix();

        drawer.translate(xPos, yPos);

        if (altitude != 0)
            jump();
        
        PShape person = new PShape();
        
        person = drawer.createShape(PConstants.GROUP);

        PShape head = drawer.createShape(PConstants.ELLIPSE, 20, 0, 30, 30);
        PShape body = drawer.createShape(PConstants.RECT, 0, 15, 40, 70);
        PShape leftHand = drawer.createShape(PConstants.RECT, -5, 15, 8, 50);
        PShape rightHand = drawer.createShape(PConstants.RECT, 35, 15, 8, 50);
        PShape leftLeg = drawer.createShape(PConstants.RECT, 0, 85, 15, 40);
        PShape rightLeg = drawer.createShape(PConstants.RECT, 25, 85, 15, 40);
        PShape saber = drawer.createShape(PConstants.LINE, 43, 65, 95, 20);
        
        if (saberSide == DrawingSurface.LEFT)
            saber = drawer.createShape(PConstants.LINE, -5, 65, -57, 20);

        saber.setStrokeWeight(3);
        saber.setStroke(drawer.color(saberColor.getRed(), 
                saberColor.getGreen(), 
                saberColor.getBlue()));

        person.addChild(head);
        person.addChild(body);
        person.addChild(rightHand);
        person.addChild(leftHand);
        person.addChild(rightLeg);
        person.addChild(leftLeg);
        person.addChild(saber);

        drawer.shape(person);

        drawer.popMatrix();

    }

    /*
     * method called by the keyPressed listener to handle with the changes in the x
     * and y coordinates of the person
     */
    public void move(String string)
    {

        if (string == DrawingSurface.RIGHT)
            xPos += 10;
        else if (string == DrawingSurface.LEFT)
            xPos -= 10;
        else if (string == DrawingSurface.UP)
            yPos -= 10;
        else if (string == DrawingSurface.DOWN)
            yPos += 10;

    }

    /*
     * method called by the keyPressed listener to handle with the changes in the
     * head color of the person
     */
    public void changeSaberColor()
    {
        saberColor = new Color((int) (Math.random() * 255), (int) (Math.random() * 255),
                (int) (Math.random() * 255));

    }

    public void jump()
    {
        if (altitude == 0)
            altitude = -4;

        if (yPos + altitude > 300)
        {
            altitude = 0;
            yPos = 300;

        }

        else if (yPos < 200)
        {
            altitude = -altitude;
            yPos = 200;
        }

        yPos += altitude;
    }
    
    public Line getSaberLine()
    {
        Line saberLine = null;

        if (saberSide == DrawingSurface.LEFT)
            saberLine = new Line(-5 + xPos, 65 + yPos, -57 + xPos, 20 + yPos);
        else if (saberSide == DrawingSurface.RIGHT)
            saberLine = new Line(43 + xPos, 65 + yPos, 95 + xPos, 20 + yPos);
        
        return saberLine;
    }

    public float getxPos()
    {
        return xPos;
    }

    public void setxPos(float xPos)
    {
        this.xPos = xPos;
    }

    public float getyPos()
    {
        return yPos;
    }

    public void setyPos(float yPos)
    {
        this.yPos = yPos;
    }

    public Color getSaberColor()
    {
        return saberColor;
    }

    public void setSaberColor(Color saberColor)
    {
        this.saberColor = saberColor;
    }

    public String getSaberSide()
    {
        return saberSide;
    }

    public void setSaberSide(String saberSide)
    {
        this.saberSide = saberSide;
    }
}
