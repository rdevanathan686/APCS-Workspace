import java.awt.Color;

import processing.core.PApplet;
import processing.core.PConstants;
import processing.core.PShape;

public class Person
{
	
	private float xPos, yPos;
	
	private	Color saberColor;
	

	private String saberSide;
	private Line saberLine;
	
	private PShape person;

	public float dir;
	

	
	// instantiates local member data
	public Person()
	{
		xPos = DrawingSurface.SCREEN_WIDTH / 2;
		yPos = DrawingSurface.SCREEN_WIDTH / 2;
		this.saberSide = DrawingSurface.RIGHT;
		
		person = new PShape();
		saberColor = Color.RED;
	}
	
	public Person(int initX, int initY, String saberSide)
	{
		xPos = initX;
		yPos = initY;
		this.saberSide = saberSide;
		
		person = new PShape();
		saberColor = Color.RED;
	}

	// method called by the DrawingSurface class draw the the person
	public void draw(PApplet drawer)
	{	
		drawer.pushMatrix();
		
		if (dir != 0)
			jump();
			
		drawer.translate(xPos, yPos);

		person = drawer.createShape(PConstants.GROUP);
		
		
		PShape head = drawer.createShape(PConstants.ELLIPSE, 20, 0, 30, 30);
		PShape body = drawer.createShape(PConstants.RECT, 0, 15, 40, 70);
		PShape leftHand = drawer.createShape(PConstants.RECT, -5, 15, 8, 50);
		PShape rightHand = drawer.createShape(PConstants.RECT, 35, 15, 8, 50);
		PShape leftLeg = drawer.createShape(PConstants.RECT, 0, 85, 15, 40);
		PShape rightLeg = drawer.createShape(PConstants.RECT, 25, 85, 15, 40);
		
		
		PShape saber = drawer.createShape(PConstants.LINE, 43, 65, 95, 20);
		saberLine = new Line(43 + xPos, 65 + yPos, 95 + xPos, 20 + yPos);
		
		
		if (saberSide == DrawingSurface.LEFT)
		{
			saber = drawer.createShape(PConstants.LINE, -5, 65, -57, 20);
			saberLine = new Line(-5 + xPos, 65 + yPos, -57 + xPos, 20 + yPos);
		}
		
		saber.setStrokeWeight(3);
		saber.setStroke(drawer.color(saberColor.getRed(), saberColor.getGreen(), saberColor.getBlue()));
		
		person.addChild(head);
		person.addChild(body);
		person.addChild(rightHand);
		person.addChild(leftHand);
		person.addChild(rightLeg);
		person.addChild(leftLeg);
		person.addChild(saber);
		
		drawer.shape(person);
		
		
		
		
		drawer.popMatrix();
				
	}

	/* method called by the keyPressed listener to 
	 * handle with the changes in the x and y coordinates of the person 
	*/
	public void move(String string) 
	{
		
		if (string == DrawingSurface.RIGHT)
			xPos += 10;
		else if (string == DrawingSurface.LEFT)
			xPos -= 10;
		else if (string == DrawingSurface.UP)
			yPos -= 10;
		else if (string == DrawingSurface.DOWN)
			yPos += 10;
		
	}

	/* method called by the keyPressed listener to 
	 * handle with the changes in the head color of the person 
	*/
	public void changeSaberColor() 
	{
		saberColor = new Color ((int)(Math.random()*255),
				(int)(Math.random()*255),
				(int)(Math.random()*255));
		
	}

	
	public float getxPos() {
		return xPos;
	}

	public void setxPos(float xPos) {
		this.xPos = xPos;
	}

	public float getyPos() {
		return yPos;
	}

	public void setyPos(float yPos) {
		this.yPos = yPos;
	}

	public Color getSaberColor() {
		return saberColor;
	}

	public void setSaberColor(Color saberColor) {
		this.saberColor = saberColor;
	}

	public String getSaberSide() {
		return saberSide;
	}

	public void setSaberSide(String saberSide) {
		this.saberSide = saberSide;
	}

	public PShape getPerson() {
		return person;
	}

	public void setPerson(PShape person) {
		this.person = person;
	}

	public Line getSaberLine() {
		return saberLine;
	}
	
	public void setSaberLine(Line saberLine) {
		this.saberLine = saberLine;
	}

	public void jump() 
	{
		
		if (yPos + dir > 300)
		{
			dir = 0;
			yPos = 300;
			
		}
			

		else if (yPos <= 200) 
		{
			yPos = 200;
			dir = -dir;
			
		}
		
		yPos += dir;
	}

	
	
	

//	public boolean intersects(Person l2) 
//	{		
//		double x3 = l2.xPos - 15;
//		double x4 = l2.xPos + 15;
//		double y3 = l2.yPos - 15;
//		double y4 = l2.yPos + 100;
//		
//		double x1 = xPos - 15;
//		double x2 = xPos + 15;
//		double y1 = yPos - 15;
//		double y2 = yPos + 100;
//		
//
//		
//		double num1 = ((x1 * y2 - y1 * x2) * (x3 - x4)) - ((x1 - x2) * (x3 * y4 - y3 * x4));
//		double num2 = ((x1 * y2 - y1 * x2) * (y3 - y4)) - ((y1 - y2) * (x3 * y4 - y3 * x4));
//		double denom = ((x1 - x2) * (y3 - y4)) - ((y1 - y2) * (x3 - x4));
//
//		
//		
//		if (denom != 0) 
//		{
//			pX = num1 / denom;
//			pY = num2 /denom;
//			
//			System.out.println(pX + " " + pY);
//			
//			if (inRectangle(x3, x4, y3, y4, x1, x2, y1, y2, pX, pY))
//				return true;
//				
//		} 
//
//		return false;
//
//
//	}
//
//
//	private boolean inRectangle(double x3, double x4, double y3, double y4, double x1, double x2, double y1, double y2, double pX, double pY)
//	{
//		return (pX >= Math.min(x1, x2) 
//				&& pX <= Math.max(x1, x2) 
//				&& pX >= Math.min(x3, x4) 
//				&& pX <= Math.max(x3, x4)
//				&& pY >= Math.min(y1, y2) 
//				&& pY <= Math.max(y1, y2) 
//				&& pY >= Math.min(y3, y4) 
//				&& pY <= Math.max(y3, y4));
//	}




	
	
	

}

